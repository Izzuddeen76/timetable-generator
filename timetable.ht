

```jsx
import React, { useState } from "react";

export default function App() {
  const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];

  // Teacher State
  const [teachers, setTeachers] = useState([]);
  const [newTeacherName, setNewTeacherName] = useState("");
  const [newTeacherSubjects, setNewTeacherSubjects] = useState("");

  // Class State
  const [classes, setClasses] = useState([]);
  const [newClassName, setNewClassName] = useState("");

  // Subjects per class
  const [classSubjects, setClassSubjects] = useState({});

  // Schedule Settings
  const [startTime, setStartTime] = useState("08:00");
  const [endTime, setEndTime] = useState("13:45");
  const [slotDuration, setSlotDuration] = useState(45);
  const [breakTime, setBreakTime] = useState("10:15-10:30");

  // Timetable State
  const [timetable, setTimetable] = useState({});

  // Utility Functions
  const formatTime = (date) => date.toTimeString().slice(0, 5);
  const parseTime = (timeStr) => {
    const [hours, minutes] = timeStr.split(":").map(Number);
    const date = new Date();
    date.setHours(hours, minutes, 0, 0);
    return date;
  };

  const generateTimeSlots = () => {
    const slots = [];
    let currentDate = parseTime(startTime);
    const endDate = parseTime(endTime);
    const [breakStart, breakEnd] = breakTime.split("-").map(parseTime);

    while (currentDate < endDate) {
      const nextDate = new Date(currentDate.getTime() + slotDuration * 60000);
      const slot = `${formatTime(currentDate)}-${formatTime(nextDate)}`;
      currentDate = nextDate;

      const slotStart = parseTime(slot.split("-")[0]);
      const slotEnd = parseTime(slot.split("-")[1]);

      if (slotEnd <= breakStart || slotStart >= breakEnd) {
        slots.push(slot);
      }
    }

    return slots;
  };

  const timeSlots = generateTimeSlots();

  const initializeTimetable = () => {
    const newTimetable = {};
    days.forEach((day) => {
      newTimetable[day] = {};
      timeSlots.forEach((slot) => {
        newTimetable[day][slot] = {};
        classes.forEach((cls) => {
          newTimetable[day][slot][cls] = null;
        });
      });
    });

    setTimetable(newTimetable);
  };

  const handleAddTeacher = () => {
    if (!newTeacherName.trim() || !newTeacherSubjects.trim()) {
      alert("Please enter both name and subjects!");
      return;
    }

    const subjectsArray = newTeacherSubjects
      .split(",")
      .map((s) => s.trim())
      .filter(Boolean);

    if (subjectsArray.length === 0) {
      alert("Please enter valid subjects separated by commas.");
      return;
    }

    setTeachers([
      ...teachers,
      { id: Date.now(), name: newTeacherName.trim(), subjects: subjectsArray },
    ]);

    setNewTeacherName("");
    setNewTeacherSubjects("");
  };

  const handleAddClass = () => {
    if (!newClassName.trim()) {
      alert("Please enter a valid class name!");
      return;
    }

    if (classes.includes(newClassName.trim())) {
      alert("This class already exists!");
      return;
    }

    setClasses([...classes, newClassName.trim()]);
    setClassSubjects({
      ...classSubjects,
      [newClassName.trim()]: [],
    });

    setNewClassName("");
  };

  const handleSetClassSubjects = (className, value) => {
    const subjects = value
      .split(",")
      .map((s) => s.trim())
      .filter(Boolean);

    setClassSubjects({
      ...classSubjects,
      [className]: subjects,
    });
  };

  const autoGenerateTimetable = () => {
    if (Object.keys(classSubjects).length === 0) {
      alert("Please assign subjects for all classes first!");
      return;
    }

    const generated = {};
    days.forEach((day) => {
      generated[day] = {};
      timeSlots.forEach((slot) => {
        generated[day][slot] = {};
        classes.forEach((cls) => {
          generated[day][slot][cls] = null;
        });
      });
    });

    const usedAssignments = new Set(); // To prevent duplicate assignments
    const assignedTeachers = new Set(); // To prevent teacher clash

    classes.forEach((cls) => {
      const subjects = classSubjects[cls] || [];

      subjects.forEach((subject, index) => {
        const day = days[Math.floor(index / timeSlots.length) % days.length];
        const slotIndex = index % timeSlots.length;
        const slot = timeSlots[slotIndex];

        if (!slot) return;

        const key = `${cls}-${subject}-${day}-${slot}`;
        if (usedAssignments.has(key)) return; // Skip if already assigned

        const teacher = teachers.find((t) =>
          t.subjects.includes(subject)
        );

        if (teacher) {
          const teacherKey = `${teacher.name}-${day}-${slot}`;
          if (!assignedTeachers.has(teacherKey)) {
            generated[day][slot][cls] = {
              teacher: teacher.name,
              subject,
            };
            usedAssignments.add(key);
            assignedTeachers.add(teacherKey);
          }
        }
      });
    });

    setTimetable(generated);
  };

  const renderTimetable = () => {
    return (
      <div className="overflow-x-auto mt-6">
        <table className="min-w-full bg-white border border-gray-300">
          <thead>
            <tr className="bg-gray-100 text-left">
              <th className="p-2 border">Time</th>
              {days.map((day) => (
                <th key={day} className="p-2 border">
                  {day}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {timeSlots.map((slot) => (
              <tr key={slot} className="hover:bg-gray-50">
                <td className="p-2 border font-medium">{slot}</td>
                {days.map((day) => (
                  <td key={`${day}-${slot}`} className="border p-1">
                    {classes.map((cls) => {
                      const entry = timetable[day]?.[slot]?.[cls];
                      return (
                        <div
                          key={`${cls}-${slot}`}
                          className={`mb-1 p-1 rounded text-xs ${
                            entry ? "bg-blue-100 text-blue-800" : "bg-gray-100"
                          }`}
                        >
                          {entry ? (
                            <>
                              <strong>{cls}</strong>
                              <br />
                              {entry.teacher} - {entry.subject}
                            </>
                          ) : (
                            "â€”"
                          )}
                        </div>
                      );
                    })}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">
          Smart Timetable Generator
        </h1>

        {/* Add Teachers */}
        <div className="bg-white shadow-md rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">Add Teachers</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Teacher Name
              </label>
              <input
                type="text"
                value={newTeacherName}
                onChange={(e) => setNewTeacherName(e.target.value)}
                placeholder="e.g., Mr. Smith"
                className="w-full border border-gray-300 rounded-md p-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Subjects (comma-separated)
              </label>
              <input
                type="text"
                value={newTeacherSubjects}
                onChange={(e) => setNewTeacherSubjects(e.target.value)}
                placeholder="e.g., Math, Physics"
                className="w-full border border-gray-300 rounded-md p-2"
              />
            </div>
            <div className="md:col-span-2">
              <button
                onClick={handleAddTeacher}
                className="mt-2 bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
              >
                Add Teacher
              </button>
            </div>
          </div>
        </div>

        {/* Add Classes with Subjects */}
        <div className="bg-white shadow-md rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">Add Classes</h2>
          <div className="flex flex-wrap gap-4 items-end">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Class Name
              </label>
              <input
                type="text"
                value={newClassName}
                onChange={(e) => setNewClassName(e.target.value)}
                placeholder="e.g., Grade 1A"
                className="w-full border border-gray-300 rounded-md p-2"
              />
            </div>
            <button
              onClick={handleAddClass}
              className="bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
            >
              Add Class
            </button>
          </div>
          <div className="mt-4">
            <strong>Current Classes:</strong>
            <ul className="list-disc list-inside mt-1 text-sm text-gray-600">
              {classes.length > 0 ? (
                classes.map((cls, idx) => (
                  <li key={idx}>
                    {cls}
                    <div className="ml-4 mt-1">
                      <label className="text-xs font-medium text-gray-600">
                        Subjects (comma-separated):
                      </label>
                      <input
                        type="text"
                        placeholder="e.g., Math, English"
                        defaultValue={classSubjects[cls]?.join(", ") || ""}
                        onBlur={(e) =>
                          handleSetClassSubjects(cls, e.target.value)
                        }
                        className="w-full border border-gray-300 rounded-md p-1 text-xs"
                      />
                    </div>
                  </li>
                ))
              ) : (
                <li>No classes added yet.</li>
              )}
            </ul>
          </div>
        </div>

        {/* Schedule Settings */}
        <div className="bg-white shadow-md rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">Set School Hours</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Start Time
              </label>
              <input
                type="time"
                value={startTime}
                onChange={(e) => setStartTime(e.target.value)}
                className="w-full border border-gray-300 rounded-md p-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                End Time
              </label>
              <input
                type="time"
                value={endTime}
                onChange={(e) => setEndTime(e.target.value)}
                className="w-full border border-gray-300 rounded-md p-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Slot Duration (minutes)
              </label>
              <input
                type="number"
                min="15"
                max="60"
                step="5"
                value={slotDuration}
                onChange={(e) => setSlotDuration(parseInt(e.target.value))}
                className="w-full border border-gray-300 rounded-md p-2"
              />
            </div>
            <div className="md:col-span-3">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Break Period (e.g., 10:15-10:30)
              </label>
              <input
                type="text"
                value={breakTime}
                onChange={(e) => setBreakTime(e.target.value)}
                placeholder="e.g., 10:15-10:30"
                className="w-full border border-gray-300 rounded-md p-2"
              />
            </div>
            <div className="md:col-span-3">
              <button
                onClick={initializeTimetable}
                className="mt-2 bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
              >
                Initialize Timetable
              </button>
            </div>
          </div>
        </div>

        {/* Generate Timetable */}
        <div className="bg-white shadow-md rounded-lg p-6 mb-6">
          <button
            onClick={autoGenerateTimetable}
            disabled={classes.length === 0 || teachers.length === 0}
            className={`mt-2 ${
              classes.length === 0 || teachers.length === 0
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-blue-600 hover:bg-blue-700"
            } text-white font-medium py-2 px-4 rounded-md transition-colors`}
          >
            Auto Generate Clash-Free Timetable
          </button>
        </div>

        {/* Display Timetable */}
        <div className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4">Generated Timetable</h2>
          {renderTimetable()}
        </div>
      </div>
    </div>
  );
}
```


